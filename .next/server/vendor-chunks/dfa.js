"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dfa";
exports.ids = ["vendor-chunks/dfa"];
exports.modules = {

/***/ "(ssr)/./node_modules/dfa/index.js":
/*!***********************************!*\
  !*** ./node_modules/dfa/index.js ***!
  \***********************************/
/***/ ((module) => {

eval("\n\nvar INITIAL_STATE = 1;\nvar FAIL_STATE = 0;\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\n\nclass StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n\n\n  match(str) {\n    var self = this;\n    return {\n      *[Symbol.iterator]() {\n        var state = INITIAL_STATE;\n        var startRun = null;\n        var lastAccepting = null;\n        var lastState = null;\n\n        for (var p = 0; p < str.length; p++) {\n          var c = str[p];\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            } // reset the state as if we started over from the initial state\n\n\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          } // start a run if not in the failure state\n\n\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          } // if accepting, mark the potential match end\n\n\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          } // reset the state to the initial state if we get into the failure state\n\n\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        } // yield the last match if any\n\n\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n\n    };\n  }\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n\n\n  apply(str, actions) {\n    for (var [start, end, tags] of this.match(str)) {\n      for (var tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = StateMachine;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGZhL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7OztBQUdkO0FBQ0E7QUFDQSxZQUFZOzs7QUFHWjtBQUNBO0FBQ0EsWUFBWTs7O0FBR1o7QUFDQTtBQUNBLFlBQVk7OztBQUdaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7OztBQUdWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvZGVoYWJpdG5leHQvLi9ub2RlX21vZHVsZXMvZGZhL2luZGV4LmpzP2JkYjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSU5JVElBTF9TVEFURSA9IDE7XG52YXIgRkFJTF9TVEFURSA9IDA7XG4vKipcbiAqIEEgU3RhdGVNYWNoaW5lIHJlcHJlc2VudHMgYSBkZXRlcm1pbmlzdGljIGZpbml0ZSBhdXRvbWF0b24uXG4gKiBJdCBjYW4gcGVyZm9ybSBtYXRjaGVzIG92ZXIgYSBzZXF1ZW5jZSBvZiB2YWx1ZXMsIHNpbWlsYXIgdG8gYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKi9cblxuY2xhc3MgU3RhdGVNYWNoaW5lIHtcbiAgY29uc3RydWN0b3IoZGZhKSB7XG4gICAgdGhpcy5zdGF0ZVRhYmxlID0gZGZhLnN0YXRlVGFibGU7XG4gICAgdGhpcy5hY2NlcHRpbmcgPSBkZmEuYWNjZXB0aW5nO1xuICAgIHRoaXMudGFncyA9IGRmYS50YWdzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIG9iamVjdCB0aGF0IHlpZWxkcyBwYXR0ZXJuIG1hdGNoZXMgb3ZlciB0aGUgaW5wdXQgc2VxdWVuY2UuXG4gICAqIE1hdGNoZXMgYXJlIG9mIHRoZSBmb3JtIFtzdGFydEluZGV4LCBlbmRJbmRleCwgdGFnc10uXG4gICAqL1xuXG5cbiAgbWF0Y2goc3RyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IElOSVRJQUxfU1RBVEU7XG4gICAgICAgIHZhciBzdGFydFJ1biA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0QWNjZXB0aW5nID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBzdHIubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICB2YXIgYyA9IHN0cltwXTtcbiAgICAgICAgICBsYXN0U3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICBzdGF0ZSA9IHNlbGYuc3RhdGVUYWJsZVtzdGF0ZV1bY107XG5cbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEZBSUxfU1RBVEUpIHtcbiAgICAgICAgICAgIC8vIHlpZWxkIHRoZSBsYXN0IG1hdGNoIGlmIGFueVxuICAgICAgICAgICAgaWYgKHN0YXJ0UnVuICE9IG51bGwgJiYgbGFzdEFjY2VwdGluZyAhPSBudWxsICYmIGxhc3RBY2NlcHRpbmcgPj0gc3RhcnRSdW4pIHtcbiAgICAgICAgICAgICAgeWllbGQgW3N0YXJ0UnVuLCBsYXN0QWNjZXB0aW5nLCBzZWxmLnRhZ3NbbGFzdFN0YXRlXV07XG4gICAgICAgICAgICB9IC8vIHJlc2V0IHRoZSBzdGF0ZSBhcyBpZiB3ZSBzdGFydGVkIG92ZXIgZnJvbSB0aGUgaW5pdGlhbCBzdGF0ZVxuXG5cbiAgICAgICAgICAgIHN0YXRlID0gc2VsZi5zdGF0ZVRhYmxlW0lOSVRJQUxfU1RBVEVdW2NdO1xuICAgICAgICAgICAgc3RhcnRSdW4gPSBudWxsO1xuICAgICAgICAgIH0gLy8gc3RhcnQgYSBydW4gaWYgbm90IGluIHRoZSBmYWlsdXJlIHN0YXRlXG5cblxuICAgICAgICAgIGlmIChzdGF0ZSAhPT0gRkFJTF9TVEFURSAmJiBzdGFydFJ1biA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFJ1biA9IHA7XG4gICAgICAgICAgfSAvLyBpZiBhY2NlcHRpbmcsIG1hcmsgdGhlIHBvdGVudGlhbCBtYXRjaCBlbmRcblxuXG4gICAgICAgICAgaWYgKHNlbGYuYWNjZXB0aW5nW3N0YXRlXSkge1xuICAgICAgICAgICAgbGFzdEFjY2VwdGluZyA9IHA7XG4gICAgICAgICAgfSAvLyByZXNldCB0aGUgc3RhdGUgdG8gdGhlIGluaXRpYWwgc3RhdGUgaWYgd2UgZ2V0IGludG8gdGhlIGZhaWx1cmUgc3RhdGVcblxuXG4gICAgICAgICAgaWYgKHN0YXRlID09PSBGQUlMX1NUQVRFKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IElOSVRJQUxfU1RBVEU7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHlpZWxkIHRoZSBsYXN0IG1hdGNoIGlmIGFueVxuXG5cbiAgICAgICAgaWYgKHN0YXJ0UnVuICE9IG51bGwgJiYgbGFzdEFjY2VwdGluZyAhPSBudWxsICYmIGxhc3RBY2NlcHRpbmcgPj0gc3RhcnRSdW4pIHtcbiAgICAgICAgICB5aWVsZCBbc3RhcnRSdW4sIGxhc3RBY2NlcHRpbmcsIHNlbGYudGFnc1tzdGF0ZV1dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGb3IgZWFjaCBtYXRjaCBvdmVyIHRoZSBpbnB1dCBzZXF1ZW5jZSwgYWN0aW9uIGZ1bmN0aW9ucyBtYXRjaGluZ1xuICAgKiB0aGUgdGFnIGRlZmluaXRpb25zIGluIHRoZSBpbnB1dCBwYXR0ZXJuIGFyZSBjYWxsZWQgd2l0aCB0aGUgc3RhcnRJbmRleCxcbiAgICogZW5kSW5kZXgsIGFuZCBzdWItbWF0Y2ggc2VxdWVuY2UuXG4gICAqL1xuXG5cbiAgYXBwbHkoc3RyLCBhY3Rpb25zKSB7XG4gICAgZm9yICh2YXIgW3N0YXJ0LCBlbmQsIHRhZ3NdIG9mIHRoaXMubWF0Y2goc3RyKSkge1xuICAgICAgZm9yICh2YXIgdGFnIG9mIHRhZ3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25zW3RhZ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBhY3Rpb25zW3RhZ10oc3RhcnQsIGVuZCwgc3RyLnNsaWNlKHN0YXJ0LCBlbmQgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlTWFjaGluZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dfa/index.js\n");

/***/ })

};
;